type: edu
files:
  - name: src/tracker/Main.java
    visible: true
    text: |
      package tracker;
      
      import java.util.Scanner;
      
      public class Main {
          public static void main(String[] args) {
              Scanner scanner = new Scanner(System.in);
              System.out.println("Learning Progress Tracker");
      
              while (true) {
                  System.out.print("> ");
                  String userInput = scanner.nextLine().trim(); // Remove leading/trailing whitespaces
      
                  if (userInput.isEmpty()) {
                      System.out.println("No input.");
                  } else if (userInput.equalsIgnoreCase("exit")) {
                      System.out.println("Bye!");
                      break; // Exit the loop and end the program
                  } else {
                      System.out.println("Unknown command!");
                  }
      
                  System.out.println(); // Add an extra newline after each input
              }
          }
      }
    learner_created: false
  - name: test/tracker/SampleTest.java
    visible: true
    text: |
      package tracker;
      
      import org.junit.jupiter.api.Test;
      
      import static org.junit.jupiter.api.Assertions.*;
      
      public class SampleTest {
      
          @Test
          void test() {
              assertEquals(5, 2 + 3);
          }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      repositories {
          mavenCentral()
      }
      
      dependencies {
          testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
          testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.1'
      }
      
      test {
          useJUnitPlatform()
      }
    learner_created: false
  - name: test/LearningProgressTrackerTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.Arrays;
      import java.util.List;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      
      public class LearningProgressTrackerTest extends StageTest<String> {
      
          @DynamicTest(order = 1)
          CheckResult testStartAndExit() {
              TestedProgram main = new TestedProgram();
              String output = main.start();
              expect(output).toContain(1).lines();
              if (incorrectString(output, "learning progress tracker")) {
                  return CheckResult.wrong("When started, your program " +
                          "should print \"Learning Progress Tracker\"");
              }
      
              if (!main.isWaitingInput()) {
                  return CheckResult.wrong("After the start, your program should " +
                          "be ready to accept commands from the user");
              }
      
              output = main.execute("back");
              expect(output).toContain(1).lines();
              if (!main.isWaitingInput()) {
                  return CheckResult.wrong("Your program should keep running after the 'back' " +
                          "command is entered");
              }
      
              if (anyMissingKeywords(output, "enter", "exit", "program")) {
                  return CheckResult.wrong("When 'back' command is entered your program " +
                          "should print the hint \"Enter 'exit' to exit the program\"");
              }
      
              output = main.execute("exit");
              expect(output).toContain(1).lines();
              if (anyMissingKeywords(output, "bye")) {
                  return CheckResult.wrong("When the 'exit' command is entered, " +
                          "your program should say bye to the user");
              }
      
              if (!main.isFinished()) {
                  return CheckResult.wrong("After the 'exit' command has been entered, " +
                          "your program should stop working");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 2, data = "getBlankInput")
          CheckResult testBlankInput(String input) {
              TestedProgram main = new TestedProgram();
              main.start();
      
              String output = main.execute(input);
              expect(output).toContain(1).lines();
              if (incorrectString(output, "no input")) {
                  return CheckResult.wrong("When the user enters an empty or blank " +
                          "string, your program should print \"No input.\"");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 3, data = "getUnknownCommands")
          CheckResult testUnknownCommands(String input) {
              TestedProgram main = new TestedProgram();
              main.start();
      
              String output = main.execute(input);
              expect(output).toContain(1).lines();
              if (anyMissingKeywords(output, "unknown", "command")) {
                  return CheckResult.wrong("When an unknown command is entered, your " +
                          "program should display an error message: \"Unknown command!\"");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 4)
          CheckResult testAddStudents1() {
              TestedProgram main = new TestedProgram();
              main.start();
      
              String output = main.execute("add students");
              expect(output).toContain(1).lines();
              if (anyMissingKeywords(output,
                      "enter", "student", "credentials", "back", "return")) {
                  return CheckResult.wrong("When 'add students' command is entered, your " +
                          "program should display the prompt \"Enter student credentials or " +
                          "'back' to return.\"");
              }
      
              output = main.execute("exit");
              expect(output).toContain(1).lines();
              if (anyMissingKeywords(output, "incorrect", "credentials")) {
                  return CheckResult.wrong("Expected output: \"Incorrect credentials.\", " +
                          "but your output was: " + output);
              }
      
              output = main.execute("back");
              expect(output).toContain(1).lines();
              if (anyMissingKeywords(output, "total", "0", "students", "added")) {
                  return CheckResult.wrong("Expected: \"Total 0 students were added\", but " +
                          "your output was: " + output);
              }
      
              output = main.execute("back");
              expect(output).toContain(1).lines();
              if (anyMissingKeywords(output, "enter", "exit", "program")) {
                  return CheckResult.wrong("When 'back' command is entered your program " +
                          "should stop waiting for student credentials");
              }
      
              output = main.execute("exit");
              expect(output).toContain(1).lines();
              if (anyMissingKeywords(output, "bye")) {
                  return CheckResult.wrong("When the 'exit' command is entered, " +
                          "your program should say bye to the user");
              }
      
              if (!main.isFinished()) {
                  return CheckResult.wrong("After the 'exit' command has been entered, " +
                          "your program should stop working");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 5)
          CheckResult testAddStudents2() {
              TestedProgram main = new TestedProgram();
              main.start();
      
              main.execute("add students");
              for (String input : getCorrectCredentials()) {
                  String output = main.execute(input);
                  expect(output).toContain(1).lines();
                  if (anyMissingKeywords(output, "student", "added")) {
                      return CheckResult.wrong("Expected output: \"Student has been added.\", but your " +
                              "output was: " + output);
                  }
              }
      
              String output = main.execute("back");
              expect(output).toContain(1).lines();
              if (anyMissingKeywords(output, "total", "10", "students", "added")) {
                  return CheckResult.wrong("Expected: \"Total 10 students have been added\", but " +
                          "your output was: " + output);
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 6)
          CheckResult testAddStudents3() {
              TestedProgram main = new TestedProgram();
              main.start();
              main.execute("add students");
      
              for (String[] args : getIncorrectCredentials()) {
                  String output = main.execute(args[0]);
                  expect(output).toContain(1).lines();
                  if (incorrectString(output, args[1])) {
                      main.stop();
                      return CheckResult.wrong("Expected output: \"" + args[1] + "\", but your " +
                              "output was: " + output);
                  }
              }
      
              String output = main.execute("back");
              expect(output).toContain(1).lines();
              if (anyMissingKeywords(output, "total", "0", "students", "added")) {
                  return CheckResult.wrong("Expected: \"Total 0 students have been added\", but " +
                          "your output was: " + output);
              }
      
              return CheckResult.correct();
          }
      
          private boolean anyMissingKeywords(String output, String... keywords) {
              List<String> tokens = Arrays.asList(
                      output.toLowerCase().split("\\W+")
              );
      
              return !tokens.containsAll(Arrays.asList(keywords.clone()));
          }
      
          private boolean incorrectString(String output, String expected) {
              String normalizedOutput = output.replaceAll("\\W+", "").toLowerCase();
              String normalizedModel = expected.replaceAll("\\W+", "").toLowerCase();
      
              return !normalizedOutput.contains(normalizedModel);
          }
      
          private String[] getBlankInput() {
              return new String[] {"", "  ", "\t", " \t"};
          }
      
          private String[] getUnknownCommands() {
              return new String[] {"abc", "quit", "  brexit ", "exi  t", "?", "break",
                      "-exit", "Ctrl+C", "exit please", ":q"};
          }
      
          private String[] getCorrectCredentials() {
              return new String[] { "John Smith jsmith@hotmail.com", "Anny Doolittle anny.md@mail.edu",
                      "Jean-Claude O'Connor jcda123@google.net", "Mary Emelianenko 125367at@zzz90.z9",
                      "Al Owen u15da125@a1s2f4f7.a1c2c5s4", "Robert Jemison Van de Graaff robertvdgraaff@mit.edu",
                      "Ed Eden a1@a1.a1", "na'me s-u ii@ii.ii", "n'a me su aa-b'b ab@ab.ab", "nA me 1@1.1"};
          }
      
          private String[][] getIncorrectCredentials() {
              return new String[][] {
                      { "", "Incorrect credentials" }, { " \t", "Incorrect credentials." },
                      { "name surname", "Incorrect credentials." },
                      { "n surname email@email.xyz", "Incorrect first name." },
                      { "'name surname email@email.xyz", "Incorrect first name." },
                      { "-name surname email@email.xyz", "Incorrect first name." },
                      { "name- surname email@email.xyz", "Incorrect first name." },
                      { "name' surname email@email.xyz", "Incorrect first name." },
                      { "nam-'e surname email@email.xyz", "Incorrect first name." },
                      { "na'-me surname email@email.xyz", "Incorrect first name." },
                      { "na--me surname email@email.xyz", "Incorrect first name." },
                      { "na''me surname email@email.xyz", "Incorrect first name." },
                      { "námé surname email@email.xyz", "Incorrect first name." },
                      { "name s email@email.xyz", "Incorrect last name." },
                      { "name -surname email@email.xyz", "Incorrect last name." },
                      { "name 'surname email@email.xyz", "Incorrect last name." },
                      { "name surnam''e email@email.xyz", "Incorrect last name." },
                      { "name surn--ame email@email.xyz", "Incorrect last name." },
                      { "name s'-urname email@email.xyz", "Incorrect last name." },
                      { "name su-'rname email@email.xyz", "Incorrect last name." },
                      { "name surname- email@email.xyz", "Incorrect last name." },
                      { "name surname' email@email.xyz", "Incorrect last name." },
                      { "name surnámé email@email.xyz", "Incorrect last name." },
                      { "name surname emailemail.xyz", "Incorrect email." },
                      { "name surname email@emailxyz", "Incorrect email." },
                      { "name surname email@e@mail.xyz", "Incorrect email." },
              };
          }
      }
    learner_created: false
  - name: src/tracker/Student.java
    visible: true
    text: |
      package tracker;
      
      import java.util.Random;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class Student {
          final int ID;
          String name;
          String surname;
          String email;
          boolean correctEntry = true;
      
          public Student(String entry) {
              String[] allWords = entry.split(" ");
              this.ID = Math.abs(new Random().nextInt(1000, 2000));
              if (allWords.length < 3) {
                  this.correctEntry = false;
                  System.out.println("Incorrect credentials.");
                  return;
              }
              StringBuilder surnameBuilder = new StringBuilder();
              if (!verifyName(allWords[0])) {
                  this.correctEntry = false;
                  System.out.println("Incorrect first name.");
                  return;
              }
              this.name = allWords[0];
              for (int i = 1; i < allWords.length-1; i++) {
      
                  if (verifyName(allWords[i])) {
                      surnameBuilder.append(allWords[i]).append(" ");
                  } else {
                      this.correctEntry = false;
                      System.out.println("Incorrect last name.");
                      return;
                  }
                  this.surname = surnameBuilder.toString().trim();
              }
              if (!verifyEmail(allWords[allWords.length-1])) {
                  this.correctEntry = false;
                  System.out.println("Incorrect email.");
              } else {
                  this.email = allWords[allWords.length-1];
              }
          }
      
          @Override
          public String toString() {
              return String.valueOf(this.ID);
          }
      
          private boolean verifyName(String name) {
              return name.matches("[A-Za-z][A-Za-z-']*[A-Za-z]") && notContainsConsecutive(name);
          }
      
          private boolean verifyEmail(String name) {
              return name.matches("[A-Za-z0-9_.-]+@[A-Za-z0-9_.-]+\\.[A-Za-z0-9_.-]+");
          }
      
          private boolean notContainsConsecutive(String name) {
              Pattern pattern = Pattern.compile("(''|--|'-|-')");
              Matcher matcher = pattern.matcher(name);
              return !matcher.find();
          }
      
          public void notifyComplete(String courseName) {
              System.out.println("To: " + this.email);
              System.out.println("Re: Your Learning Progress");
              System.out.println("Hello, " + this.name + " " + this.surname + "! You have accomplished our " + courseName + " course!");
          }
      }
    learner_created: true
  - name: src/tracker/UserInteraction.java
    visible: true
    text: |-
      package tracker;
      
      import java.util.*;
      
      public class UserInteraction {
          boolean interactionOver = false;
          static Scanner scanner = new Scanner(System.in);
          Data data;
          public UserInteraction() {
              data = new Data();
              startInteraction();
          }
      
          private void startInteraction() {
              System.out.println("Learning Progress Tracker");
              while (!interactionOver) {
                  String command = scanner.nextLine();
                  switch (command.trim()) {
                      case "" -> System.out.println("No input.");
                      case "back" -> System.out.println("Enter 'exit' to exit the program.");
                      case "list" -> data.listStudents();
                      case "add points" -> {
                          System.out.println("Enter an id and points or 'back' to return:");
                          data.addPoints();
                      }
                      case "find" -> {
                          System.out.println("Enter an id and points or 'back' to return:");
                          data.findStudent();
                      }
                      case "add students" -> {
                          System.out.println("Enter student credentials or 'back' to return:");
                          data.addStudents();
                      }
                      case "statistics" -> {
                          System.out.println("Type the name of a course to see details or 'back' to quit:");
                          data.printStatistics();
                      }
                      case "notify" -> {
                          data.notifyComplete();
                      }
                      case "exit" -> {
                          System.out.println("Bye!");
                          interactionOver = true;
                      }
                      default -> System.out.println("Error: unknown command!");
                  }
              }
          }
      }
    learner_created: true
  - name: src/tracker/Data.java
    visible: true
    text: |-
      package tracker;
      
      import java.util.*;
      
      public class Data {
          private final Map<String, Course> courses;
          private final Set<Student> students;
          public Data() {
              courses = new HashMap<>();
              students = new HashSet<>();
              // add each course here when constructing the object
              courses.put("Java", new Course("Java", 600));
              courses.put("DSA", new Course("DSA", 400));
              courses.put("Databases", new Course("Databases", 480));
              courses.put("Spring", new Course("Spring", 550));
          }
          // put here the methods that interact with the classes and the students
          public void addJavaPoints(Student student, int points) {
              courses.get("Java").addPoints(student, points);
          }
          public void addDSAPoints(Student student, int points) {
              courses.get("DSA").addPoints(student, points);
          }
          public void addDatabasesPoints(Student student, int points) {
              courses.get("Databases").addPoints(student, points);
          }
          public void addSpringPoints(Student student, int points) {
              courses.get("Spring").addPoints(student, points);
          }
      
          // add students method
          public void addStudents() {
              String entry = UserInteraction.scanner.nextLine();
              int count = 0;
              while (!entry.equals("back")) {
                  Student student = new Student(entry);
                  if (student.correctEntry) {
                      if (emailNotTaken(student.email)) {
                          System.out.println("The student has been added.");
                          students.add(student);
                          count++;
                      } else {
                          System.out.println("This email is already taken.");
                      }
                  }
                  entry = UserInteraction.scanner.nextLine();
              }
              System.out.println("Total " + count + " students have been added.");
          }
          // list students
          public void listStudents() {
              if (students.size() == 0) {
                  System.out.println("No students found.");
              } else {
                  System.out.println("Students:");
                  students.forEach(System.out::println);
              }
          }
          // add points
          public void addPoints() {
              String entry = UserInteraction.scanner.nextLine();
              if (entry.equals("back")) {
                  return;
              }
              String[] entryArr = entry.split(" ");
              if (entryArr.length != 5) {
                  System.out.println("Incorrect points format.");
                  addPoints();
              }
              int studentID = 0;
              try {
                  studentID = Integer.parseInt(entryArr[0]);
              } catch (NumberFormatException e) {
                  System.out.printf("No student is found for id=%s.\n", entryArr[0]);
                  addPoints();
              }
              int javaPoints = getInt(entryArr[1]);
              int DSAPoints = getInt(entryArr[2]);
              int dbPoints = getInt(entryArr[3]);
              int springPoints = getInt(entryArr[4]);
      
              Student student = getByID(studentID);
              if (student == null) {
                  System.out.printf("No student is found for id=%d.\n", studentID);
                  UserInteraction.scanner.nextLine();
                  addPoints();
              } else {
                  if (javaPoints != Integer.MAX_VALUE && DSAPoints != Integer.MAX_VALUE && dbPoints != Integer.MAX_VALUE && springPoints != Integer.MAX_VALUE) {
                      addJavaPoints(student, javaPoints);
                      addDSAPoints(student, DSAPoints);
                      addDatabasesPoints(student, dbPoints);
                      addSpringPoints(student, springPoints);
                      System.out.println("Points updated.");
                      addPoints();
                  } else {
                      System.out.println("Incorrect points format.");
                      addPoints();
                  }
              }
          }
      
          // statistics + details after naming
          public void printStatistics() {
              System.out.println("Most popular: " + getMostPopularCourse());
              System.out.println("Least popular: " + getLeastPopularCourse());
              System.out.println("Highest activity: " + getHighestActivityCourse());
              System.out.println("Lowest activity: " + getLowestActivityCourse());
              System.out.println("Easiest course: " + getEasiestCourse());
              System.out.println("Hardest course: " + getHardestCourse());
      
              printDetails();
          }
      
          private void printDetails() {
              String choice = UserInteraction.scanner.nextLine();
      
              if (!choice.equals("back")) {
                  if (courses.keySet().stream().anyMatch(e -> e.equalsIgnoreCase(choice))) {
                      generateDetails(courses.get(getNameOfCourse(choice)));
                  } else {
                      System.out.println("Unknown course.");
                  }
                  printDetails();
              }
          }
      
          private String getNameOfCourse(String choice) {
              for (String course: courses.keySet()
              ) {
                  if (course.equalsIgnoreCase(choice)) {
                      return course;
                  }
              }
              return null;
          }
      
          private void generateDetails(Course course) {
              List<Student> sortedList = course.getSortedStudentList();
              String leftAlignFormat = "%-6s %-6d %-7s %n";
      
              System.out.println(course.name);
              System.out.format(" id      points   completed   %n");
              for (Student student: sortedList) {
                  System.out.format(leftAlignFormat, student.ID, course.studentsAssigned.get(student), course.getPercentageComplete(student));
              }
          }
      
          private String getHardestCourse() {
              StringBuilder hardestCourse = new StringBuilder();
              double hardestCourseNumber = Double.MAX_VALUE;
              for (String course: this.courses.keySet()
              ) {
                  double courseAvgScore = courses.get(course).getAvgScore();
                  if (courseAvgScore > 0 && courseAvgScore < hardestCourseNumber && !getEasiestCourse().contains(course)) {
                      hardestCourseNumber = courseAvgScore;
                      hardestCourse = new StringBuilder();
                      hardestCourse.append(course);
                  } else if (courseAvgScore == hardestCourseNumber) {
                      hardestCourse.append(", ").append(course);
                  }
              }
              if (hardestCourseNumber == Double.MAX_VALUE) {
                  return "n/a";
              }
              return hardestCourse.toString();
          }
      
          private String getEasiestCourse() {
              StringBuilder easiestCourse = new StringBuilder();
              double easiestCourseNumber = 0.0;
              for (String course: this.courses.keySet()
              ) {
                  double courseAvgScore = courses.get(course).getAvgScore();
                  if (courseAvgScore > easiestCourseNumber) {
                      easiestCourseNumber = courseAvgScore;
                      easiestCourse = new StringBuilder();
                      easiestCourse.append(course);
                  } else if (courseAvgScore == easiestCourseNumber && easiestCourseNumber != 0.0) {
                      easiestCourse.append(", ").append(course);
                  }
              }
              if (easiestCourseNumber == 0.0) {
                  return "n/a";
              }
              return easiestCourse.toString();
          }
      
          private String getHighestActivityCourse() {
              StringBuilder mostSubmissions = new StringBuilder();
              int mostSubmissionsNumber = 0;
              for (String course: this.courses.keySet()
              ) {
                  int numberOfSubmissions = courses.get(course).submissions.size();
                  if (numberOfSubmissions > mostSubmissionsNumber) {
                      mostSubmissionsNumber = numberOfSubmissions;
                      mostSubmissions = new StringBuilder();
                      mostSubmissions.append(course);
                  } else if (numberOfSubmissions == mostSubmissionsNumber && mostSubmissionsNumber != 0) {
                      mostSubmissions.append(", ").append(course);
                  }
              }
              if (mostSubmissionsNumber == 0) {
                  return "n/a";
              }
              return mostSubmissions.toString();
          }
      
          private String getLowestActivityCourse() {
              StringBuilder leastSubmissions = new StringBuilder();
              int leastSubmissionsNumber = Integer.MAX_VALUE;
              for (String course: this.courses.keySet()
              ) {
                  int numberOfStudents = courses.get(course).studentsAssigned.keySet().size();
                  if (numberOfStudents > 0 && numberOfStudents < leastSubmissionsNumber && !getHighestActivityCourse().contains(course)) {
                      leastSubmissionsNumber = numberOfStudents;
                      leastSubmissions = new StringBuilder();
                      leastSubmissions.append(course);
                  } else if (numberOfStudents == leastSubmissionsNumber) {
                      leastSubmissions.append(", ").append(course);
                  }
              }
              if (leastSubmissionsNumber == Integer.MAX_VALUE) {
                  return "n/a";
              }
              return leastSubmissions.toString();
          }
      
          private String getMostPopularCourse() {
              StringBuilder mostPopular = new StringBuilder();
              int mostPopularNumber = 0;
              for (String course: this.courses.keySet()
              ) {
                  int numberOfStudents = courses.get(course).studentsAssigned.keySet().size();
                  if (numberOfStudents > mostPopularNumber) {
                      mostPopularNumber = numberOfStudents;
                      mostPopular = new StringBuilder();
                      mostPopular.append(course);
                  } else if (numberOfStudents == mostPopularNumber && mostPopularNumber != 0) {
                      mostPopular.append(", ").append(course);
                  }
              }
              if (mostPopularNumber == 0) {
                  return "n/a";
              }
              return mostPopular.toString();
          }
      
          private String getLeastPopularCourse() {
              StringBuilder leastPopular = new StringBuilder();
              int leastPopularNumber = Integer.MAX_VALUE;
              for (String course: this.courses.keySet()
              ) {
                  int numberOfStudents = courses.get(course).studentsAssigned.keySet().size();
                  if (numberOfStudents > 0 && numberOfStudents < leastPopularNumber && !getMostPopularCourse().contains(course)) {
                      leastPopularNumber = numberOfStudents;
                      leastPopular = new StringBuilder();
                      leastPopular.append(course);
                  } else if (numberOfStudents == leastPopularNumber) {
                      leastPopular.append(", ").append(course);
                  }
              }
              if (leastPopularNumber == Integer.MAX_VALUE) {
                  return "n/a";
              }
              return leastPopular.toString();
          }
      
          //helpers
          private boolean emailNotTaken(String email) {
              return students.stream().noneMatch(e -> e.email.equals(email));
          }
          private int getInt(String stringInt) {
              try {
                  int parsed = Integer.parseInt(stringInt);
                  if (parsed >= 0) {
                      return parsed;
                  } else {
                      return Integer.MAX_VALUE;
                  }
              } catch (NumberFormatException e) {
                  return Integer.MAX_VALUE;
              }
          }
          private Student getByID(int id) {
              for (Student student: students
              ) {
                  if (student.ID == id) {
                      return student;
                  }
              }
              return null;
          }
      
          public void findStudent() {
              String choice = UserInteraction.scanner.nextLine();
              if (choice.equals("back")) {
                  return;
              }
              Student student = getByID(Integer.parseInt(choice));
              if (student == null) {
                  System.out.println("No student found for id:" + choice);
                  findStudent();
              } else {
                  System.out.print("\n" + student.ID + " points: ");
                  for (String course: courses.keySet()
                  ) {
                      System.out.print(course + "=");
                      System.out.print(courses.get(course).getPoints(student));
                      System.out.print("; ");
                  }
                  System.out.print("\n");
                  findStudent();
              }
          }
      
          public void notifyComplete() {
              List<Student> studentsNotified = new ArrayList<>();
              for (Course course: courses.values()){
                  for (Student student: course.studentsCompleted.keySet()
                  ) {
                      if (!course.studentsCompleted.get(student) && !studentsNotified.contains(student)) {
                          studentsNotified.add(student);
                      }
                  }
                  course.notifyComplete(course.name);
              }
              System.out.println("Total " + studentsNotified.size() + " students have been notified.");
          }
      }
    learner_created: true
  - name: src/tracker/Course.java
    visible: true
    text: |
      package tracker;
      
      import java.math.RoundingMode;
      import java.text.DecimalFormat;
      import java.util.*;
      
      public class Course {
          String name;
          int completePoints;
          List<Integer> submissions;
          Map<Student, Boolean> studentsCompleted;
          Map<Student, Integer> studentsAssigned;
          public Course(String name, int completePoints) {
              this.name = name;
              this.completePoints = completePoints;
              this.submissions = new ArrayList<>();
              this.studentsAssigned = new HashMap<>();
              this.studentsCompleted = new HashMap<>();
          }
      
          public void addPoints(Student student, int points) {
              if (points > 0) {
                  if (studentsAssigned.containsKey(student)) {
                      submissions.add(points);
                      studentsAssigned.put(student, studentsAssigned.get(student) + points);
                  } else {
                      submissions.add(points);
                      studentsAssigned.put(student, points);
                  }
                  if (studentsAssigned.get(student) >= completePoints) {
                      studentsCompleted.put(student, false);
                  }
              }
          }
      
          public List<Student> getSortedStudentList() {
              // Sort student lists by the total number of points in descending order and then by the ID in ascending order.
              Comparator<Map.Entry<Student, Integer>> comparator = (o1, o2) -> {
                  if (o1.getValue().equals(o2.getValue())) {
                      return Integer.compare(o1.getKey().ID, o2.getKey().ID);
                  } else {
                      return -o1.getValue().compareTo(o2.getValue());
                  }
              };
              List<Student> students = new ArrayList<>();
              studentsAssigned.entrySet().stream().sorted(comparator).forEach(e -> students.add(e.getKey()));
      
              return students;
          }
      
          public double getAvgScore() {
              int sum = 0;
              for (int submission: submissions
              ) {
                  sum += submission;
              }
              return (double) sum / submissions.size();
          }
      
          public String getPercentageComplete(Student student) {
              double points = studentsAssigned.get(student);
              double completePoints = this.completePoints;
      
              Double percentage =  ((points/completePoints)) * 100;
              DecimalFormat format = new DecimalFormat("0.0");
              format.setRoundingMode(RoundingMode.HALF_UP);
              return format.format(percentage) + "%";
          }
      
          public int getPoints(Student student) {
              return Objects.requireNonNullElse(studentsAssigned.get(student), 0);
          }
      
          public void notifyComplete(String courseName) {
              for (Student student: studentsCompleted.keySet()
              ) {
                  if (!studentsCompleted.get(student)) {
                      student.notifyComplete(courseName);
                      studentsCompleted.remove(student);
                      studentsCompleted.put(student, true);
                  }
              }
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/14397#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 09 Sep 2023 20:15:41 UTC"
record: 2
